from app import db # we already defined db instance inside app/__init__.py file
import datetime
from app.auth.models import User
from app.admin_panel.models import Project, Task


class Session(db.Model):
    __tablename__ = 'Session'
    id = db.Column(db.Integer, primary_key = True)

    #relationship
    t_id = db.Column(db.Integer, db.ForeignKey('Task.id'))

    s_start_time = db.Column(db.DateTime, default = datetime.datetime.utcnow())
    s_end_time = db.Column(db.DateTime, nullable = True)
    status = db.Column(db.String(100))

    def __init__(self, t_id, s_start_time, status):
                self.t_id = t_id
                self.s_start_time = s_start_time
                self.status = status

################## Worker class ##############################
class Worker(db.Model):
    __tablename__ = 'Worker'

    id = db.Column(db.Integer, primary_key = True)
    AMT_worker_id = db.Column(db.String(100)) #auto-generated by AMT
    # assign_id = db.Column(db.String(100))
    # arrival_time = db.Column(db.DateTime, default = datetime.datetime.now())
    def __init__(self, AMT_worker_id):
                self.AMT_worker_id = AMT_worker_id
######################## END ###################################

################## Assignments class ##############################
class Assignments(db.Model):
    __tablename__ = 'Assignments'

    id = db.Column(db.Integer, primary_key = True)
    w_id = db.Column(db.Integer, db.ForeignKey('Worker.id'))
    hit_id = db.Column(db.String(100))
    assign_id = db.Column(db.String(100))
    s_id = db.Column(db.Integer, db.ForeignKey('Session.id'))
    status_id = db.Column(db.Integer, db.ForeignKey('WorkerStatus.id'), nullable = True)
    time_stamp = db.Column(db.DateTime, default = datetime.datetime.utcnow())

    def __init__(self, w_id, hit_id, assign_id, s_id, time_stamp):
                self.w_id = w_id
                self.hit_id = hit_id
                self.assign_id = assign_id
                self.s_id = s_id
                self.time_stamp = time_stamp
######################## END ###################################

################## LiveStatus class ##############################
class LiveStatus(db.Model):
    __tablename__ = 'LiveStatus'

    id = db.Column(db.Integer, primary_key = True)
    w_id = db.Column(db.Integer, db.ForeignKey('Worker.id'))
    s_id = db.Column(db.Integer, db.ForeignKey('Session.id'))
    status_id = db.Column(db.Integer, db.ForeignKey('WorkerStatus.id'))
    time_stamp = db.Column(db.DateTime, default = datetime.datetime.utcnow())

    def __init__(self, w_id, s_id, status_id, time_stamp):
                self.w_id = w_id
                self.s_id = s_id
                self.status_id = status_id
                self.time_stamp = time_stamp
######################## END ###################################

################## DetailedStatus class ##############################
#This table will not update rows, rather it will add new row for each update
class DetailedStatus(db.Model):
    __tablename__ = 'DetailedStatus'

    id = db.Column(db.Integer, primary_key = True)
    ls_id = db.Column(db.Integer, db.ForeignKey('LiveStatus.id'))
    status = db.Column(db.Integer, db.ForeignKey('WorkerStatus.id'))
    time_stamp = db.Column(db.DateTime, default = datetime.datetime.utcnow())

    def __init__(self, ls_id, status, time_stamp):
                self.ls_id = ls_id
                self.status = status
                self.time_stamp = time_stamp
######################## END ###################################

################## WorkerStatus class ##############################
class WorkerStatus(db.Model):
    __tablename__ = 'WorkerStatus'

    id = db.Column(db.Integer, primary_key = True)
    status = db.Column(db.String(100))

    def __init__(self, status):
                self.status = status
######################## END ###################################


class SESSION_SQLALCHEMY(db.Model):
    __tablename__ = 'SESSION_SQLALCHEMY'

    id = db.Column(db.Integer, primary_key = True)
    Name = db.Column(db.String(100))
